#lang racket
(require "base")
(require "filhos")
(require "mutacao")
(require "vnd")

(provide set-covering-algorithm)

(random-seed 13)

;; gera a populacao inicial
(define (gerar-populacao-inicial p)
  (struct-copy problema p 
               [populacao (build-list (problema-populacao-maxima p)
                          (λ (n) (make-individuo (escolher-colunas-individuo (problema-colunas p)
                                                                             (problema-linhas p)))))]))

;; faz a atualização da população para a proxima iteraçao
(define (atualizar-populacao filhos prob) 
  (define populacao-inteira (append filhos (problema-populacao prob)))
  (define populacao-ordenada (classificar-populacao populacao-inteira))
  (struct-copy problema prob 
               [populacao (take populacao-ordenada 
                                (problema-populacao-maxima prob))])
)

(define (stop-by-time? ini fim)
   (>= (- (current-seconds) ini) fim))

(define (stop-by-solution? pop qtdade-iguais)
  (define pop-ordenada (classificar-populacao pop))
  (define first-peso (individuo-peso (first pop-ordenada)))
  (define iguais (count (λ (i) (= (individuo-peso i) first-peso)) pop-ordenada))
  (>= iguais qtdade-iguais))

(define (novo-problema prob)
  (define filhos (cruzar-casais (escolher-reprodutores prob) 
                                (problema-linhas prob)))
  (define mut-filhos (mutacao filhos 
                              (problema-taxa-mutacao prob) 
                              (problema-colunas prob)))
  (define vnd-filhos (executa-vnd mut-filhos 
                                  prob))
  (atualizar-populacao vnd-filhos 
                       prob)
)


(define (solucao prob)
  (cond[(stop-by-solution? (problema-populacao prob) 
                           (problema-qtdade-iguais prob)) prob]
       [(stop-by-time? (problema-tempo-inicial prob)
                       (problema-tempo-limite prob)) prob]
       [else (solucao (novo-problema prob))]))

(define (set-covering-algorithm 
         file-id 
         numero-estruturas-vnd
         numero-vizinhos-vnd
         taxa-mutacao 
         populacao-maxima 
         qtdade-iteracoes 
         tempo-limite)
  (define params (make-params-list file-id))
  (define prob (make-problema 
                params  
                numero-estruturas-vnd
                numero-vizinhos-vnd
                taxa-mutacao 
                populacao-maxima 
                qtdade-iteracoes 
                tempo-limite))
  
  (define prob-ini (gerar-populacao-inicial prob))
  
  (define prob-final (solucao prob-ini))
  
  (resultados file-id prob-final)
  
)

(define (resultados file-id prob-final)

  #;(define filename (string-append "../resultados/teste" (number->string file-id) ".txt"))
  
  #;(display-to-file (problema-populacao prob-final) 
                   filename
                   #:mode 'text	 	 	 	 
                   #:exists 'replace)
  
  (define out-list (list file-id
                         (problema-taxa-mutacao prob-final)
                         (problema-populacao-maxima prob-final)
                         (problema-qtdade-iguais prob-final)
                         (problema-tempo-limite prob-final)
                         
                         (- (current-seconds) 
                            (problema-tempo-inicial prob-final))
                         
                         (individuo-peso 
                          (first (classificar-populacao 
                                  (problema-populacao prob-final))))))
  
  (define (out lst)
    (foldr (λ (f r) (string-append " " (number->string f) r)) "" lst))
  
  (display-to-file (string-append "\n#" (out out-list))
                   "../resultados/out.txt"	 	 	 	 
                   #:mode 'text	 	 	 	 
                   #:exists 'append)	
  
  out-list
)
      